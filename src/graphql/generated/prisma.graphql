# source: http://localhost:4466
# timestamp: Thu Sep 06 2018 16:45:00 GMT-0700 (Pacific Daylight Time)

type AggregateAuthPayload {
  count: Int!
}

type AggregateEvent {
  count: Int!
}

type AggregateImage {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AuthPayload {
  token: String!
  user(where: UserWhereInput): User!
}

"""A connection to a list of items."""
type AuthPayloadConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AuthPayloadEdge]!
  aggregate: AggregateAuthPayload!
}

input AuthPayloadCreateInput {
  token: String!
  user: UserCreateOneInput!
}

"""An edge in a connection."""
type AuthPayloadEdge {
  """The item at the end of the edge."""
  node: AuthPayload!

  """A cursor for use in pagination."""
  cursor: String!
}

enum AuthPayloadOrderByInput {
  token_ASC
  token_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type AuthPayloadPreviousValues {
  token: String!
}

type AuthPayloadSubscriptionPayload {
  mutation: MutationType!
  node: AuthPayload
  updatedFields: [String!]
  previousValues: AuthPayloadPreviousValues
}

input AuthPayloadSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AuthPayloadSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AuthPayloadSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AuthPayloadSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AuthPayloadWhereInput
}

input AuthPayloadUpdateInput {
  token: String
  user: UserUpdateOneInput
}

input AuthPayloadWhereInput {
  """Logical AND on all given filters."""
  AND: [AuthPayloadWhereInput!]

  """Logical OR on all given filters."""
  OR: [AuthPayloadWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AuthPayloadWhereInput!]
  token: String

  """All values that are not equal to given value."""
  token_not: String

  """All values that are contained in given list."""
  token_in: [String!]

  """All values that are not contained in given list."""
  token_not_in: [String!]

  """All values less than the given value."""
  token_lt: String

  """All values less than or equal the given value."""
  token_lte: String

  """All values greater than the given value."""
  token_gt: String

  """All values greater than or equal the given value."""
  token_gte: String

  """All values containing the given string."""
  token_contains: String

  """All values not containing the given string."""
  token_not_contains: String

  """All values starting with the given string."""
  token_starts_with: String

  """All values not starting with the given string."""
  token_not_starts_with: String

  """All values ending with the given string."""
  token_ends_with: String

  """All values not ending with the given string."""
  token_not_ends_with: String
  user: UserWhereInput
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

scalar DateTime

type Event implements Node {
  id: ID!
  attendees(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  name: String!
  location: String!
  description: String!
  startDateUtc: DateTime!
  endDateUtc: DateTime!
  isAllDay: Boolean!
  isRecurring: Boolean!
  duration: Int!
  recurrencePattern: String
  images(where: ImageWhereInput, orderBy: ImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Image!]
}

"""A connection to a list of items."""
type EventConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EventEdge]!
  aggregate: AggregateEvent!
}

input EventCreateInput {
  name: String!
  location: String!
  description: String
  startDateUtc: DateTime!
  endDateUtc: DateTime!
  isAllDay: Boolean!
  isRecurring: Boolean!
  duration: Int!
  recurrencePattern: String
  attendees: UserCreateManyWithoutEventsInput
  images: ImageCreateManyInput
}

input EventCreateManyWithoutAttendeesInput {
  create: [EventCreateWithoutAttendeesInput!]
  connect: [EventWhereUniqueInput!]
}

input EventCreateWithoutAttendeesInput {
  name: String!
  location: String!
  description: String
  startDateUtc: DateTime!
  endDateUtc: DateTime!
  isAllDay: Boolean!
  isRecurring: Boolean!
  duration: Int!
  recurrencePattern: String
  images: ImageCreateManyInput
}

"""An edge in a connection."""
type EventEdge {
  """The item at the end of the edge."""
  node: Event!

  """A cursor for use in pagination."""
  cursor: String!
}

enum EventOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  location_ASC
  location_DESC
  description_ASC
  description_DESC
  startDateUtc_ASC
  startDateUtc_DESC
  endDateUtc_ASC
  endDateUtc_DESC
  isAllDay_ASC
  isAllDay_DESC
  isRecurring_ASC
  isRecurring_DESC
  duration_ASC
  duration_DESC
  recurrencePattern_ASC
  recurrencePattern_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type EventPreviousValues {
  id: ID!
  name: String!
  location: String!
  description: String!
  startDateUtc: DateTime!
  endDateUtc: DateTime!
  isAllDay: Boolean!
  isRecurring: Boolean!
  duration: Int!
  recurrencePattern: String
}

type EventSubscriptionPayload {
  mutation: MutationType!
  node: Event
  updatedFields: [String!]
  previousValues: EventPreviousValues
}

input EventSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [EventSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [EventSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EventSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: EventWhereInput
}

input EventUpdateInput {
  name: String
  location: String
  description: String
  startDateUtc: DateTime
  endDateUtc: DateTime
  isAllDay: Boolean
  isRecurring: Boolean
  duration: Int
  recurrencePattern: String
  attendees: UserUpdateManyWithoutEventsInput
  images: ImageUpdateManyInput
}

input EventUpdateManyWithoutAttendeesInput {
  create: [EventCreateWithoutAttendeesInput!]
  connect: [EventWhereUniqueInput!]
  disconnect: [EventWhereUniqueInput!]
  delete: [EventWhereUniqueInput!]
  update: [EventUpdateWithWhereUniqueWithoutAttendeesInput!]
  upsert: [EventUpsertWithWhereUniqueWithoutAttendeesInput!]
}

input EventUpdateWithoutAttendeesDataInput {
  name: String
  location: String
  description: String
  startDateUtc: DateTime
  endDateUtc: DateTime
  isAllDay: Boolean
  isRecurring: Boolean
  duration: Int
  recurrencePattern: String
  images: ImageUpdateManyInput
}

input EventUpdateWithWhereUniqueWithoutAttendeesInput {
  where: EventWhereUniqueInput!
  data: EventUpdateWithoutAttendeesDataInput!
}

input EventUpsertWithWhereUniqueWithoutAttendeesInput {
  where: EventWhereUniqueInput!
  update: EventUpdateWithoutAttendeesDataInput!
  create: EventCreateWithoutAttendeesInput!
}

input EventWhereInput {
  """Logical AND on all given filters."""
  AND: [EventWhereInput!]

  """Logical OR on all given filters."""
  OR: [EventWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EventWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  location: String

  """All values that are not equal to given value."""
  location_not: String

  """All values that are contained in given list."""
  location_in: [String!]

  """All values that are not contained in given list."""
  location_not_in: [String!]

  """All values less than the given value."""
  location_lt: String

  """All values less than or equal the given value."""
  location_lte: String

  """All values greater than the given value."""
  location_gt: String

  """All values greater than or equal the given value."""
  location_gte: String

  """All values containing the given string."""
  location_contains: String

  """All values not containing the given string."""
  location_not_contains: String

  """All values starting with the given string."""
  location_starts_with: String

  """All values not starting with the given string."""
  location_not_starts_with: String

  """All values ending with the given string."""
  location_ends_with: String

  """All values not ending with the given string."""
  location_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  startDateUtc: DateTime

  """All values that are not equal to given value."""
  startDateUtc_not: DateTime

  """All values that are contained in given list."""
  startDateUtc_in: [DateTime!]

  """All values that are not contained in given list."""
  startDateUtc_not_in: [DateTime!]

  """All values less than the given value."""
  startDateUtc_lt: DateTime

  """All values less than or equal the given value."""
  startDateUtc_lte: DateTime

  """All values greater than the given value."""
  startDateUtc_gt: DateTime

  """All values greater than or equal the given value."""
  startDateUtc_gte: DateTime
  endDateUtc: DateTime

  """All values that are not equal to given value."""
  endDateUtc_not: DateTime

  """All values that are contained in given list."""
  endDateUtc_in: [DateTime!]

  """All values that are not contained in given list."""
  endDateUtc_not_in: [DateTime!]

  """All values less than the given value."""
  endDateUtc_lt: DateTime

  """All values less than or equal the given value."""
  endDateUtc_lte: DateTime

  """All values greater than the given value."""
  endDateUtc_gt: DateTime

  """All values greater than or equal the given value."""
  endDateUtc_gte: DateTime
  isAllDay: Boolean

  """All values that are not equal to given value."""
  isAllDay_not: Boolean
  isRecurring: Boolean

  """All values that are not equal to given value."""
  isRecurring_not: Boolean
  duration: Int

  """All values that are not equal to given value."""
  duration_not: Int

  """All values that are contained in given list."""
  duration_in: [Int!]

  """All values that are not contained in given list."""
  duration_not_in: [Int!]

  """All values less than the given value."""
  duration_lt: Int

  """All values less than or equal the given value."""
  duration_lte: Int

  """All values greater than the given value."""
  duration_gt: Int

  """All values greater than or equal the given value."""
  duration_gte: Int
  recurrencePattern: String

  """All values that are not equal to given value."""
  recurrencePattern_not: String

  """All values that are contained in given list."""
  recurrencePattern_in: [String!]

  """All values that are not contained in given list."""
  recurrencePattern_not_in: [String!]

  """All values less than the given value."""
  recurrencePattern_lt: String

  """All values less than or equal the given value."""
  recurrencePattern_lte: String

  """All values greater than the given value."""
  recurrencePattern_gt: String

  """All values greater than or equal the given value."""
  recurrencePattern_gte: String

  """All values containing the given string."""
  recurrencePattern_contains: String

  """All values not containing the given string."""
  recurrencePattern_not_contains: String

  """All values starting with the given string."""
  recurrencePattern_starts_with: String

  """All values not starting with the given string."""
  recurrencePattern_not_starts_with: String

  """All values ending with the given string."""
  recurrencePattern_ends_with: String

  """All values not ending with the given string."""
  recurrencePattern_not_ends_with: String
  attendees_every: UserWhereInput
  attendees_some: UserWhereInput
  attendees_none: UserWhereInput
  images_every: ImageWhereInput
  images_some: ImageWhereInput
  images_none: ImageWhereInput
}

input EventWhereUniqueInput {
  id: ID
}

enum Gender {
  FEMALE
  MALE
  OTHER
  UNKNOWN
}

type Image {
  url: String!
  title: String
  description: String
}

"""A connection to a list of items."""
type ImageConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ImageEdge]!
  aggregate: AggregateImage!
}

input ImageCreateInput {
  url: String!
  title: String
  description: String
}

input ImageCreateManyInput {
  create: [ImageCreateInput!]
}

"""An edge in a connection."""
type ImageEdge {
  """The item at the end of the edge."""
  node: Image!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ImageOrderByInput {
  url_ASC
  url_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ImagePreviousValues {
  url: String!
  title: String
  description: String
}

type ImageSubscriptionPayload {
  mutation: MutationType!
  node: Image
  updatedFields: [String!]
  previousValues: ImagePreviousValues
}

input ImageSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ImageSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ImageSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ImageSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ImageWhereInput
}

input ImageUpdateInput {
  url: String
  title: String
  description: String
}

input ImageUpdateManyInput {
  create: [ImageCreateInput!]
}

input ImageWhereInput {
  """Logical AND on all given filters."""
  AND: [ImageWhereInput!]

  """Logical OR on all given filters."""
  OR: [ImageWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ImageWhereInput!]
  url: String

  """All values that are not equal to given value."""
  url_not: String

  """All values that are contained in given list."""
  url_in: [String!]

  """All values that are not contained in given list."""
  url_not_in: [String!]

  """All values less than the given value."""
  url_lt: String

  """All values less than or equal the given value."""
  url_lte: String

  """All values greater than the given value."""
  url_gt: String

  """All values greater than or equal the given value."""
  url_gte: String

  """All values containing the given string."""
  url_contains: String

  """All values not containing the given string."""
  url_not_contains: String

  """All values starting with the given string."""
  url_starts_with: String

  """All values not starting with the given string."""
  url_not_starts_with: String

  """All values ending with the given string."""
  url_ends_with: String

  """All values not ending with the given string."""
  url_not_ends_with: String
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createEvent(data: EventCreateInput!): Event!
  createAuthPayload(data: AuthPayloadCreateInput!): AuthPayload!
  createImage(data: ImageCreateInput!): Image!
  createUser(data: UserCreateInput!): User!
  updateEvent(data: EventUpdateInput!, where: EventWhereUniqueInput!): Event
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  deleteEvent(where: EventWhereUniqueInput!): Event
  deleteUser(where: UserWhereUniqueInput!): User
  upsertEvent(where: EventWhereUniqueInput!, create: EventCreateInput!, update: EventUpdateInput!): Event!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  updateManyEvents(data: EventUpdateInput!, where: EventWhereInput): BatchPayload!
  updateManyAuthPayloads(data: AuthPayloadUpdateInput!, where: AuthPayloadWhereInput): BatchPayload!
  updateManyImages(data: ImageUpdateInput!, where: ImageWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  deleteManyEvents(where: EventWhereInput): BatchPayload!
  deleteManyAuthPayloads(where: AuthPayloadWhereInput): BatchPayload!
  deleteManyImages(where: ImageWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  events(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event]!
  authPayloads(where: AuthPayloadWhereInput, orderBy: AuthPayloadOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [AuthPayload]!
  images(where: ImageWhereInput, orderBy: ImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Image]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  event(where: EventWhereUniqueInput!): Event
  user(where: UserWhereUniqueInput!): User
  eventsConnection(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EventConnection!
  authPayloadsConnection(where: AuthPayloadWhereInput, orderBy: AuthPayloadOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AuthPayloadConnection!
  imagesConnection(where: ImageWhereInput, orderBy: ImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ImageConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  event(where: EventSubscriptionWhereInput): EventSubscriptionPayload
  authPayload(where: AuthPayloadSubscriptionWhereInput): AuthPayloadSubscriptionPayload
  image(where: ImageSubscriptionWhereInput): ImageSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User implements Node {
  id: ID!
  facebookId: String
  name: String
  password: String!
  email: String!
  gender: Gender
  events(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event!]
  profilePictureUrl: String
  userTier: UserTier
  birthday: DateTime
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  facebookId: String
  name: String
  password: String!
  email: String!
  gender: Gender
  profilePictureUrl: String
  userTier: UserTier
  birthday: DateTime
  events: EventCreateManyWithoutAttendeesInput
}

input UserCreateManyWithoutEventsInput {
  create: [UserCreateWithoutEventsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutEventsInput {
  facebookId: String
  name: String
  password: String!
  email: String!
  gender: Gender
  profilePictureUrl: String
  userTier: UserTier
  birthday: DateTime
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  facebookId_ASC
  facebookId_DESC
  name_ASC
  name_DESC
  password_ASC
  password_DESC
  email_ASC
  email_DESC
  gender_ASC
  gender_DESC
  profilePictureUrl_ASC
  profilePictureUrl_DESC
  userTier_ASC
  userTier_DESC
  birthday_ASC
  birthday_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  facebookId: String
  name: String
  password: String!
  email: String!
  gender: Gender
  profilePictureUrl: String
  userTier: UserTier
  birthday: DateTime
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

enum UserTier {
  BASIC
  GOLD
  PLATINUM
}

input UserUpdateDataInput {
  facebookId: String
  name: String
  password: String
  email: String
  gender: Gender
  profilePictureUrl: String
  userTier: UserTier
  birthday: DateTime
  events: EventUpdateManyWithoutAttendeesInput
}

input UserUpdateInput {
  facebookId: String
  name: String
  password: String
  email: String
  gender: Gender
  profilePictureUrl: String
  userTier: UserTier
  birthday: DateTime
  events: EventUpdateManyWithoutAttendeesInput
}

input UserUpdateManyWithoutEventsInput {
  create: [UserCreateWithoutEventsInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutEventsInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutEventsInput!]
}

input UserUpdateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  delete: Boolean
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpdateWithoutEventsDataInput {
  facebookId: String
  name: String
  password: String
  email: String
  gender: Gender
  profilePictureUrl: String
  userTier: UserTier
  birthday: DateTime
}

input UserUpdateWithWhereUniqueWithoutEventsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutEventsDataInput!
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithWhereUniqueWithoutEventsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutEventsDataInput!
  create: UserCreateWithoutEventsInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  facebookId: String

  """All values that are not equal to given value."""
  facebookId_not: String

  """All values that are contained in given list."""
  facebookId_in: [String!]

  """All values that are not contained in given list."""
  facebookId_not_in: [String!]

  """All values less than the given value."""
  facebookId_lt: String

  """All values less than or equal the given value."""
  facebookId_lte: String

  """All values greater than the given value."""
  facebookId_gt: String

  """All values greater than or equal the given value."""
  facebookId_gte: String

  """All values containing the given string."""
  facebookId_contains: String

  """All values not containing the given string."""
  facebookId_not_contains: String

  """All values starting with the given string."""
  facebookId_starts_with: String

  """All values not starting with the given string."""
  facebookId_not_starts_with: String

  """All values ending with the given string."""
  facebookId_ends_with: String

  """All values not ending with the given string."""
  facebookId_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  gender: Gender

  """All values that are not equal to given value."""
  gender_not: Gender

  """All values that are contained in given list."""
  gender_in: [Gender!]

  """All values that are not contained in given list."""
  gender_not_in: [Gender!]
  profilePictureUrl: String

  """All values that are not equal to given value."""
  profilePictureUrl_not: String

  """All values that are contained in given list."""
  profilePictureUrl_in: [String!]

  """All values that are not contained in given list."""
  profilePictureUrl_not_in: [String!]

  """All values less than the given value."""
  profilePictureUrl_lt: String

  """All values less than or equal the given value."""
  profilePictureUrl_lte: String

  """All values greater than the given value."""
  profilePictureUrl_gt: String

  """All values greater than or equal the given value."""
  profilePictureUrl_gte: String

  """All values containing the given string."""
  profilePictureUrl_contains: String

  """All values not containing the given string."""
  profilePictureUrl_not_contains: String

  """All values starting with the given string."""
  profilePictureUrl_starts_with: String

  """All values not starting with the given string."""
  profilePictureUrl_not_starts_with: String

  """All values ending with the given string."""
  profilePictureUrl_ends_with: String

  """All values not ending with the given string."""
  profilePictureUrl_not_ends_with: String
  userTier: UserTier

  """All values that are not equal to given value."""
  userTier_not: UserTier

  """All values that are contained in given list."""
  userTier_in: [UserTier!]

  """All values that are not contained in given list."""
  userTier_not_in: [UserTier!]
  birthday: DateTime

  """All values that are not equal to given value."""
  birthday_not: DateTime

  """All values that are contained in given list."""
  birthday_in: [DateTime!]

  """All values that are not contained in given list."""
  birthday_not_in: [DateTime!]

  """All values less than the given value."""
  birthday_lt: DateTime

  """All values less than or equal the given value."""
  birthday_lte: DateTime

  """All values greater than the given value."""
  birthday_gt: DateTime

  """All values greater than or equal the given value."""
  birthday_gte: DateTime
  events_every: EventWhereInput
  events_some: EventWhereInput
  events_none: EventWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
